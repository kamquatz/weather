{"version":3,"sources":["NavBar.js","Lists.js","CheckBoxes.js","InlineStyles.js","Cards.js","MainContent.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Navbar_default","bg","variant","Brand","href","Toggle","aria-controls","Collapse","className","Nav_default","Link","NavDropdown_default","title","id","Item","Divider","Lists","CheckBoxes","type","InlineStyles","timeOfDay","hours","Date","getHours","styles","fontSize","color","style","Cards","Card_default","Header","Body","Title","Text","Button_default","MainContent","src_Cards","src_InlineStyles","src_Lists","src_CheckBoxes","Footer","sticky","class","target","rel","App","Fragment","src_NavBar","src_MainContent","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7328fb7.chunk.js","sourcesContent":["import React from \"react\"\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nfunction NavBar() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">mobiclick</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse className=\"justify-content-end\">\n                <Nav>\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#link\">Link</Nav.Link>\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n        )\n}\n\nexport default NavBar","import React from \"react\"\n\nfunction Lists() {\n    return (\n        <div>\n            <h2>Ordered and Unordered Lists</h2>\n            <ol>\n                <li>Ordered 1</li>\n                <li>Ordered 2</li>\n                <li>Ordered 3</li>\n            </ol>\n            <ul>\n                <li>Unordered 1</li>\n                <li>Unordered 2</li>\n                <li>Unordered 3</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Lists","\nimport React from \"react\"\n\nfunction CheckBoxes() {\n    return (\n        <div>\n            <h2>Check Boxes</h2>\n            <input type=\"checkbox\" /> Learn React <br />\n            <input type=\"checkbox\" /> Install React <br />\n            <input type=\"checkbox\" /> Start React App <br />\n            <input type=\"checkbox\" /> Build React App <br />\n        </div>\n    )\n}\n\nexport default CheckBoxes","\nimport React from \"react\"\n\nfunction InlineStyles() {\n    const firstName = \"John\"\n    const lastName = \"Doe\"\n    const date = new Date()\n    const hours = date.getHours()\n    let timeOfDay\n    const styles = {\n        fontSize: 18\n      }\n      \n      if (hours < 12) {\n        timeOfDay = \"morning\"\n        styles.color = \"#04756F\"\n      } else if (hours >= 12 && hours < 17) {\n        timeOfDay = \"afternoon\"\n        styles.color = \"#8914A3\"\n      } else {\n        timeOfDay = \"night\"\n        styles.color = \"#D90000\"\n      }\n    return (\n        <div style={styles}>\n            <h2>Inline Styles</h2>\n            My name is {firstName} {lastName} <br />\n            Good {timeOfDay}.\n        </div>\n    )\n}\n\nexport default InlineStyles","\nimport React from \"react\"\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\nfunction Cards() {\n    return (\n            <Card>\n                <Card.Header>Card Example</Card.Header>\n                <Card.Body>\n                    <Card.Title>Special title treatment</Card.Title>\n                    <Card.Text>\n                    With supporting text below as a natural lead-in to additional content.\n                    </Card.Text>\n                    <Button variant=\"primary\">Go somewhere</Button>\n                </Card.Body>\n            </Card>\n    )\n}\n\nexport default Cards","\nimport React from \"react\"\nimport Lists from \"./Lists\";\nimport CheckBoxes from \"./CheckBoxes\";\nimport InlineStyles from \"./InlineStyles\";\nimport Cards from \"./Cards\";\n\nfunction MainContent() {\n    return (\n        <main className=\"main-content\">\n            <h4>This is where most of my main content will go...</h4>\n            <Cards />\n            <InlineStyles />\n            <Lists />\n            <CheckBoxes />\n        </main>\n    )\n}\n\nexport default MainContent","import React from \"react\"\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction Footer() {\n    return (\n        <Navbar  bg=\"dark\" sticky=\"bottom\">\n            <Navbar.Collapse className=\"justify-content-end\">\n                <small class=\"pull-right text-white\">\n                    Website Designed by <a href=\"http://mobiclick.co.nf\" target=\"_blank\" rel=\"noopener noreferrer\" >MobiClick Systems</a>\n                </small>\n            </Navbar.Collapse>\n        </Navbar>\n       \n    )\n}\n\nexport default Footer","import React from \"react\"\nimport NavBar from \"./NavBar\";\nimport MainContent from \"./MainContent\";\nimport Footer from \"./Footer\"\n\nfunction App() {\n    return (\n        <>\n            <NavBar />\n            <MainContent />\n            <Footer />\n        </>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}